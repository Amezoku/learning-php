<?php

use App\PaymentGateway\Paddle\Transaction;

require_once __DIR__ . '/../vendor/autoload.php';

$transaction = new Transaction(25);

// Абстракция — это работа с объектом через понятный интерфейс, не зная внутреннего устройства объекта
// Важно что делает объект, а не как именно он это делает (управление машиной, не зная, что под капотом)

// Абстракция это не то же самое что и абстрактные классы и методы, это совсем другое понятие
// Абстракция по сути ближе к инкапсуляции, чем к абстрактным классам и методам

$transaction->process();    // Важно что делает этот метод, а не как он это делает
echo '<br>';                // Изменения внутри метода не должны влиять на эту часть кода

// Изменения доступа с private на public нарушит не только инкапсуляцию, но и абстракцию
// Инкапсуляция скрывает внутреннее состояние и информацию, а абстракция скрывает реализацию
// Класс нужно делать так, чтобы его изменения не ломали слишком много кода, где используется этот класс

// Есть способ получить доступ к private свойствам и методам c помощью интроспекции (PHP Reflection API)

$reflectionProperty = new \ReflectionProperty(Transaction::class, 'amount');
$reflectionProperty->setAccessible(true);
$reflectionProperty->setValue($transaction, 100);
var_dump($reflectionProperty->getValue($transaction));

// Таким образом суть модификаторов доступа не в том, чтобы полностью запретить к ним доступ
// Они нужны, чтобы дать понять, что определенные свойства и методы должны оставаться закрытыми от внешних изменений

// Объекты одного типа могут получать доступ к private и protected свойствам и методам друг друга

$transaction->copyFrom(new Transaction(200));   // Выведет bool(true) из private метода sendEmail()

// Подробнее тут https://www.youtube.com/watch?v=kA9BTNPFObo&t=848s&ab_channel=ProgramWithGio