<?php

namespace app;

class ToasterPro extends Toaster    // Наследование свойств, методов и констант с помощью extends
{                                   // В наследуемом классе нельзя уменьшить область видимости, но можно увеличить
    public function __construct()
    {
        parent::__construct();      // При переопределении метода необходимо явно вызвать родительский метод

        // Вызов родительского метода должен идти первым, кроме случаев когда пред ним требуется особая логика
        // Например - подготовка аргументов для передачи в родительский метод

        // Если в родительском классе нет конструктора, то его все равно можно сделать в наследуемом классе
        // Если метод необходимо переопределить, но вызывать родительский метод не нужно

        $this->size = 4;    // Переопределить свойство, метод или константу можно, только если они public или protected
    }

//    public function addSlice(int $slice): string      // При переопределении метода нельзя менять сигнатуру
//    {                                                 // Но это правило не применяется к конструктору
//
//    }

// PHP не поддерживает множественное наследование. Это значит, что нельзя наследовать от более чем одного класса
// PHP поддерживает многоуровневое наследование для использования иерархического наследования

// Наследование должно быть логичным. Можно расширить класс PaymentAccount до CheckingAccount и SavingsAccount
// Но не следует расширять CheckingAccount до SavingsAccount, так как второй не является первым

    public function toastBagel()
    {
        foreach ($this->slices as $i => $slice) {
            echo ($i + 1) . ': Toasting ' . $slice . ' with bagels option' . '<br>';
        }
    }

// Если лишние методы приходится переопределять вот так, то следует отказаться от наследования в пользу композиции
//    public function foo()
//    {
//        throw new \Exception('Not Supported');
//    }
}